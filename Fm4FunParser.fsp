// Open the file that defines the type "expr" we shall use as AST
%{
open Fm4FunTypesAST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token TIMES DIV PLUS MINUS POW LPAR RPAR EOF
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%left PLUS MINUS
%left TIMES DIV
%right POW


// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <expr> start
%type <expr> expression

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: expression EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:

//Template:
//C ::= x := a | A[a] := a | skip | C ; C | if GC fi | do GC od
//GC ::= b -> C | GC [] GC
//a ::= n | x | A[a] | a + a | a - a | a * a | a / a | - a | a ^ a | (a)
//b ::= true | false | b & b | b | b | b && b | b || b | !b | a = a | a != a | a > a | a >= a | a < a | a <= a | (b)

command:
    | VARIABLE ASSIGN aExpression   {  }
    | ARRAY ASSIGN aExpression      {  }
    | SKIP                          {  }
    | command SC command            {  }
    | IF guarded                    {  }
    | DO guarded                    {  }

guarded:
    | bExpression ARROW command     {  }
    | guarded ALSO guarded          {  }

aExpression:
  | aExpression MULT aExpression    { MultExpr($1,$3) }
  | aExpression DIV aExpression     { DivExpr($1,$3) }
  | aExpression ADD aExpression     { AddExpr($1,$3) }
  | aExpression MINUS aExpression   { MinusExpr($1,$3) }
  | aExpression POW aExpression     { PowExpr($1,$3) }
  | MINUS aExpression               { UMinusExpr($2) }
  | NUM                             { Num($1) }
  | VARIABLE                        {  }
  | ARRAY                           {  }
  | LPAR aExpression RPAR           { $2 }

bExpression:
    | TRUE                          {  }
    | FALSE                         {  }
    | bExpression AND bExpression   {  }
    | bExpression OR bExpression    {  }
    | bExpression SCAND bExpression {  }
    | bExpression SCOR bExpression  {  }
    | NOT bExpression               {  }
    | aExpression EQUALS aExpression    {  }
    | aExpression NEQUALS aExpression   {  }
    | aExpression GREATER aExpression   {  }
    | aExpression GOE aExpression       {  } //Greater or equal
    | aExpression LESS aExpression      {  }
    | aExpression LOE aExpression       {  } //Less or equal
    | LPAR bExpression RPAR             { $2 }
  

// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
