// Open the file that defines the type "expr" we shall use as AST
%{
open Fm4FunTypesAST
%}

// Declare the tokens (terminal symbols)
%token <float> NUM
%token <string> STRING
%token <> TRUE FALSE
%token <> MULT 
%token <> DIV 
%token <> ADD 
%token <> MINUS 
%token <> POW 
%token <> LPAR 
%token <> RPAR 
%token <> EOF 
%token <> SKIP
%token <> DOUBLE
%token <> IF
%token <> DO
%token <> ARROW
%token <> ALSO
%token <> VARIABLE
%token <> LBRACK
%token <> RBRACK
%token <> ASSIGN
%token <> AND
%token <> OR
%token <> SCAND
%token <> SCOR
%token <> NOT
%token <> EQUALS
%token <> NEQUALS
%token <> GREATER
%token <> GOE
%token <> LESS
%token <> LOE

// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%right ASSIGN
%left SCOR
%left SCAND
%left OR
%left AND
%left EQUALS NEQUALS
%left LESS LOE GREATER GOE
%left PLUS MINUS
%left TIMES DIV
%right POW
%right NOT

// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <Cexpr> start
%type <Cexpr> command
%type <Cexpr> guarded
%type <Aexpr> aExpression
%type <Bexpr> bExpression

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: command EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:

//Template:
//C ::= x := a | A[a] := a | skip | C ; C | if GC fi | do GC od
//GC ::= b -> C | GC [] GC
//a ::= n | x | A[a] | a + a | a - a | a * a | a / a | - a | a ^ a | (a)
//b ::= true | false | b & b | b | b | b && b | b || b | !b | a = a | a != a | a > a | a >= a | a < a | a <= a | (b)

command:
    | VARIABLE ASSIGN aExpression                           { AssignExpr($1,$3) }
    | LBRACK string RBRACK aExpression ASSIGN aExpression   { AssignToArrExpr($2,$4,$6) }
    | SKIP                                                  { SkipExpr() }
    | command DOUBLE command                                { DoubleExpr($1,$3) }
    | IF guarded FI                                         { IfExpr($2) }
    | DO guarded OD                                         { DoExpr($2) }

guarded:
    | bExpression ARROW command         { ArrowExpr($1,$3) }
    | guarded ALSO guarded              { AlsoExpr($1,$3) }

aExpression:
  | aExpression MULT aExpression        { MultExpr($1,$3) }
  | aExpression DIV aExpression         { DivExpr($1,$3) }
  | aExpression ADD aExpression         { AddExpr($1,$3) }
  | aExpression MINUS aExpression       { MinusExpr($1,$3) }
  | aExpression POW aExpression         { PowExpr($1,$3) }
  | MINUS aExpression                   { UMinusExpr($2) }
  | NUM                                 { Num($1) }
  | VARIABLE                            { Var($1) }
  | LBRACK string RBRACK aExpression    { ArrEntry($2,$4) }
  | LPAR aExpression RPAR               { $2 }

bExpression:
    | TRUE                              { True($1) }
    | FALSE                             { False($1) }
    | bExpression AND bExpression       { AndExpr($1,$3) }
    | bExpression OR bExpression        { OrExpr($1,$3) }
    | bExpression SCAND bExpression     { ScAndExpr($1,$3) } //Short circuit and
    | bExpression SCOR bExpression      { ScOrExpr($1,$3 } // -||- or
    | NOT bExpression                   { NotExpr($2) }
    | aExpression EQUALS aExpression    { EqualExpr($1,$3) }
    | aExpression NEQUALS aExpression   { NotEqualExpr($1,$3) }
    | aExpression GREATER aExpression   { GreaterThanExpr($1,$3) }
    | aExpression GOE aExpression       { GreaterOrEqualExpr($1,$3) } //Greater or equal
    | aExpression LESS aExpression      { LessThanExpr($1,$3) }
    | aExpression LOE aExpression       { LessOrEqualExpr($1,$3) } //Less or equal
    | LPAR bExpression RPAR             { $2 }
  

// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
